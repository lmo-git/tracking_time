import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
from PIL import Image
from pyzbar.pyzbar import decode
import io
import pytz

# ============================================
# üîê Google Sheets Connection
# ============================================
SHEET_KEY = "1jRUsA6AxPVlPLeVgFexPYTRZycFCq72oevYQsISuMUs"
SCAN_SHEET = "scan"
BILLING_SHEET = "billing"

scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

json_key = st.secrets["gcp"]
creds = Credentials.from_service_account_info(json_key, scopes=scopes)
gc = gspread.authorize(creds)

scan_sheet = gc.open_by_key(SHEET_KEY).worksheet(SCAN_SHEET)
billing_sheet = gc.open_by_key(SHEET_KEY).worksheet(BILLING_SHEET)

# ============================================
# üìç Helper Functions
# ============================================
def get_all_scans():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sheet scan (‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å Google Sheets)"""
    data = scan_sheet.get_all_values()  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° header)
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sheet
    if len(data) > 1:
        headers = data[0]                       # ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        rows = data[1:]                         # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        df = pd.DataFrame(rows, columns=headers)
    elif len(data) == 1:
        # ‡∏°‡∏µ‡πÅ‡∏ï‡πà header ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        df = pd.DataFrame(columns=data[0])
    else:
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏¢
        df = pd.DataFrame(columns=["ColumnA"])
    
    return df

def lookup_station(code):
    match = colStations[colStations["Code"] == code]
    return match["Name"].iloc[0] if not match.empty else "Unknown Station"

def update_last_row(index, row_dict, sheet):
    for i, (k, v) in enumerate(row_dict.items(), start=1):
        sheet.update_cell(index + 2, i, v)

def notify(message, type="info"):
    if type == "warning":
        st.warning(message)
    elif type == "error":
        st.error(message)
    else:
        st.info(message)

def append_to_sheet(row_dict):
    scan_sheet.append_row(list(row_dict.values()))

def append_to_billing(row_dict):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á sheet billing"""
    billing_sheet.append_row(list(row_dict.values()))

# ============================================
# üïπÔ∏è Sidebar Navigation
# ============================================
st.sidebar.title("üîñ Navigation")
page = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", ["üì∑ Scan Page", "üìã Billing Page"])

# ============================================
# üöõ PAGE 1: Scan Page
# ============================================
if page == "üì∑ Scan Page":
    st.title("üöõ ‡∏£‡∏∞‡∏ö‡∏ö Tracking Time - TCRY (QR Code Version)")

    colStations = pd.DataFrame({
        "Code": ["S1", "S2", "S3", "S4"],
        "Name": ["‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à", "‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
    })

    plate = st.text_input("‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ (Plate Number):")

    reason_checked = st.checkbox("‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥")
    reason = "‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥" if reason_checked else ""

   st.markdown("### üì∑ ‡∏™‡πÅ‡∏Å‡∏ô QR Code (S1 / S2 / S3 / S4)")
img_file = st.camera_input("‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πÅ‡∏Å‡∏ô QR Code")

barcode_input = None
if img_file is not None:
    image = Image.open(io.BytesIO(img_file.getvalue()))
    decoded_objects = decode(image)
    if decoded_objects:
        barcode_input = decoded_objects[0].data.decode("utf-8").strip().upper()
        st.success(f"üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö QR Code: {barcode_input}")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà")

# ============================================
# üß† Main Logic
# ============================================
if not plate.strip():
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÅ‡∏Å‡∏ô QR Code")
    st.stop()

if barcode_input:
    code = barcode_input
    if code not in ["S1", "S2", "S3", "S4"]:
        st.error("‚ö†Ô∏è QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô S1, S2, S3 ‡∏´‡∏£‡∏∑‡∏≠ S4 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    else:
        try:
            tz = pytz.timezone("Asia/Bangkok")
            ts = datetime.now(tz)
            df = get_all_scans()
            staName = lookup_station(code)
            lastScan = df[df["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ"] == plate].sort_values("ScanDateTime", ascending=False).head(1)
            lastScan = lastScan.iloc[0] if not lastScan.empty else None

            # ‚úÖ Define Station Order
            station_order = {"S1": 1, "S2": 2, "S3": 3, "S4": 4}

            if lastScan is not None:
                # ‡∏´‡∏≤ station ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                last_code = None
                for c in ["Barcode4", "Barcode3", "Barcode2", "Barcode"]:
                    if pd.notna(lastScan.get(c)) and lastScan[c] != "":
                        last_code = lastScan[c]
                        break

                # ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
                if last_code and station_order[code] < station_order[last_code]:
                    st.error(f"‚ùå ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠ {last_code} ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πÅ‡∏Å‡∏ô {code})")
                    st.stop()

                # ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                if last_code and station_order[code] > station_order[last_code] + 1:
                    expected_next = [k for k, v in station_order.items() if v == station_order[last_code] + 1][0]
                    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡∏à‡∏≤‡∏Å {last_code} ‡πÑ‡∏õ {code} ‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô {expected_next} ‡∏Å‡πà‡∏≠‡∏ô")
                    st.stop()

                # ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
                if code == last_code and not (
                    (code == "S3" and reason.strip() != "") or
                    (code == "S4" and pd.notna(lastScan["‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"]))
                ):
                    notify(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô {code} ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ", "warning")
                    st.stop()

            # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å S1 ‡πÄ‡∏™‡∏°‡∏≠
            if code != "S1" and lastScan is None:
                st.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô S1 ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
                st.stop()

            # ‚úÖ Save to Google Sheet
            if code == "S1":
                new_row = {
                    "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ": plate,
                    "Barcode": "S1",
                    "Barcode2": "",
                    "Barcode3": "",
                    "Barcode4": "",
                    "Station": staName,
                    "Station2": "",
                    "Station3": "",
                    "Station4": "",
                    "Time": ts.strftime("%H:%M:%S"),
                    "Time2": "",
                    "Time3": "",
                    "Time4": "",
                    "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏": "",
                    "ScanDateTime": ts.strftime("%Y-%m-%d %H:%M:%S")
                }
                append_to_sheet(new_row)

            elif code in ["S2", "S3", "S4"] and lastScan is not None:
                idx = lastScan.name
                update_dict = lastScan.to_dict()
                update_dict[f"Barcode{code[-1]}"] = code
                update_dict[f"Station{code[-1]}"] = staName
                update_dict[f"Time{code[-1]}"] = ts.strftime("%H:%M:%S")
                if code == "S3":
                    update_dict["‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"] = reason.strip()
                update_dict["ScanDateTime"] = ts.strftime("%Y-%m-%d %H:%M:%S")
                update_last_row(idx, update_dict, scan_sheet)

            st.success(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô {code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ @ {ts.strftime('%H:%M:%S')}")

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")

# ============================================
# üìã ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Sheet
# ============================================
st.divider()
st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Google Sheet (scan)")
try:
    df = get_all_scans()
    st.dataframe(df)
except Exception as e:
    st.error(f"Cannot fetch Google Sheet: {e}")

# ============================================
# üí≥ PAGE 2: Billing Page (Protected)
# ============================================
elif page == "üìã Billing Page":
    st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ (Billing)")

    # üîê Require Access Code
    with st.expander("üîí ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Billing"):
        access_code = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Billing:", type="password")
        if access_code != "TCRY2025":
            st.warning("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            st.stop()

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sheet
    df_scan = get_all_scans()

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    if not df_scan.empty and df_scan.shape[1] > 0:
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å (Column A)
        unique_plates = (
            df_scan.iloc[:, 0]                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
            .astype(str)
            .str.strip()
            .replace("", pd.NA)
            .dropna()
            .unique()
            .tolist()
        )
        unique_plates = sorted(unique_plates)
    else:
        unique_plates = []
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô sheet scan ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")

    # ‚úÖ UI ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    plate = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", unique_plates)

    reason_options = [
        "",
        "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏°‡∏≠‡∏ö‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
        "‡∏Ç‡∏∂‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô",
        "‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î",
        "‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≤‡πÄ‡∏•‡∏ó‡∏ú‡∏¥‡∏î",
        "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏∞‡∏ö‡∏∏)"
    ]
    reason = st.selectbox("‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):", reason_options)

    # ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Billing
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Billing"):
        if not plate:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        else:
            try:
                tz = pytz.timezone("Asia/Bangkok")
                ts = datetime.now(tz)

                # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Time3 (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå K = index 10) ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                df_filtered = df_scan[df_scan.iloc[:, 0].astype(str).str.strip() == plate]
                if not df_filtered.empty and df_filtered.shape[1] > 10:
                    last_time3 = df_filtered.iloc[-1, 11]  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 11 (K)
                else:
                    last_time3 = ""

                # ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                new_row = {
                    "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ": plate,
                    "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏": reason,
                    "Time3": last_time3,
                    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤": ts.strftime("%Y-%m-%d %H:%M:%S")
                }

                append_to_billing(new_row)
                st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ @ {ts.strftime('%H:%M:%S')} (Time3: {last_time3})")

            except Exception as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")

    st.divider()
    st.subheader("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheet (billing)")
    try:
        data_billing = billing_sheet.get_all_records()
        df_billing = pd.DataFrame(data_billing)
        st.dataframe(df_billing)
    except Exception as e:
        st.error(f"Cannot fetch billing sheet: {e}")
