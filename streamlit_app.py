import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
from PIL import Image
from pyzbar.pyzbar import decode
import io
import pytz  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° timezone support

# ============================================
# üîê Google Sheets Connection
# ============================================
SHEET_KEY = "1jRUsA6AxPVlPLeVgFexPYTRZycFCq72oevYQsISuMUs"
SHEET_NAME = "scan"

scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

json_key = st.secrets["gcp"]
creds = Credentials.from_service_account_info(json_key, scopes=scopes)
gc = gspread.authorize(creds)
sheet = gc.open_by_key(SHEET_KEY).worksheet(SHEET_NAME)

# ============================================
# üßæ Ensure Header Exists
# ============================================
expected_headers = [
    "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "Barcode", "Barcode2", "Barcode3", "Barcode4",
    "Station", "Station2", "Station3", "Station4",
    "Time", "Time2", "Time3", "Time4", "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏", "ScanDateTime"
]
headers = sheet.row_values(1)
if headers != expected_headers:
    sheet.insert_row(expected_headers, 1)

# ============================================
# üìç Mock Stations
# ============================================
colStations = pd.DataFrame({
    "Code": ["S1", "S2", "S3", "S4"],
    "Name": ["‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à", "‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£", "‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à"]
})

# ============================================
# üßç Streamlit UI
# ============================================
st.title("üöõ ‡∏£‡∏∞‡∏ö‡∏ö Tracking Time - TCRY")

plate = st.text_input("‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ (Plate Number):")

reason_options = [
    "",
    "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏°‡∏≠‡∏ö‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
    "‡∏Ç‡∏∂‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô",
    "‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡∏¥‡∏î",
    "‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≤‡πÄ‡∏•‡∏ó‡∏ú‡∏¥‡∏î",
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏£‡∏∞‡∏ö‡∏∏)"
]
reason = st.selectbox("‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):", reason_options)

# ============================================
# üì∑ Camera QR Scanner
# ============================================
st.markdown("### üì∑ ‡∏™‡πÅ‡∏Å‡∏ô QR Code (S1 / S2 / S3 / S4)")
img_file = st.camera_input("‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πÅ‡∏Å‡∏ô QR Code")

barcode_input = None
if img_file is not None:
    image = Image.open(io.BytesIO(img_file.getvalue()))
    decoded_objects = decode(image)
    if decoded_objects:
        barcode_input = decoded_objects[0].data.decode("utf-8").strip().upper()
        st.success(f"üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö QR Code: {barcode_input}")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö QR Code ‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà")

# ============================================
# üîß Helper Functions
# ============================================
def lookup_station(code):
    match = colStations[colStations["Code"] == code]
    return match["Name"].iloc[0] if not match.empty else "Unknown Station"

def get_all_scans():
    data = sheet.get_all_records()
    return pd.DataFrame(data) if data else pd.DataFrame(columns=expected_headers)

def append_to_sheet(row_dict):
    sheet.append_row(list(row_dict.values()))

def update_last_row(index, row_dict):
    for i, (k, v) in enumerate(row_dict.items(), start=1):
        sheet.update_cell(index + 2, i, v)

def notify(message, type="info"):
    if type == "warning":
        st.warning(message)
    elif type == "error":
        st.error(message)
    else:
        st.info(message)

# ============================================
# üß† Main Logic: Trigger on QR Scan
# ============================================
if barcode_input:
    code = barcode_input
    if code not in ["S1", "S2", "S3", "S4"]:
        st.error("‚ö†Ô∏è QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô S1, S2, S3 ‡∏´‡∏£‡∏∑‡∏≠ S4 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
    else:
        try:
            # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
            tz = pytz.timezone("Asia/Bangkok")
            ts = datetime.now(tz)

            df = get_all_scans()
            staName = lookup_station(code)
            lastScan = df[df["‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ"] == plate].sort_values("ScanDateTime", ascending=False).head(1)
            lastScan = lastScan.iloc[0] if not lastScan.empty else None

            # 1Ô∏è‚É£ Duplicate scan check
            if lastScan is not None:
                last_code = lastScan["Barcode4"] or lastScan["Barcode3"] or lastScan["Barcode2"] or lastScan["Barcode"]
                if code == last_code and not (
                    (code == "S3" and reason.strip() != "") or
                    (code == "S4" and pd.notna(lastScan["‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"]))
                ):
                    notify(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô {code} ‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ", "warning")
                    st.stop()

            # 2Ô∏è‚É£ Skip-step validation
            if code == "S2" and (lastScan is None or pd.isna(lastScan["Barcode"])):
                notify("‡πÑ‡∏°‡πà‡∏û‡∏ö S1 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ S2 ‡πÑ‡∏î‡πâ", "error")
                st.stop()
            elif code == "S3" and (lastScan is None or pd.isna(lastScan["Barcode2"])):
                notify("‡πÑ‡∏°‡πà‡∏û‡∏ö S2 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ S3 ‡πÑ‡∏î‡πâ", "error")
                st.stop()
            elif code == "S4" and (lastScan is None or pd.isna(lastScan["Barcode3"])):
                notify("‡πÑ‡∏°‡πà‡∏û‡∏ö S3 ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ S4 ‡πÑ‡∏î‡πâ", "error")
                st.stop()

            # 3Ô∏è‚É£ Save to Google Sheet
            if code == "S1":
                new_row = {
                    "‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ": plate,
                    "Barcode": "S1",
                    "Barcode2": "",
                    "Barcode3": "",
                    "Barcode4": "",
                    "Station": staName,
                    "Station2": "",
                    "Station3": "",
                    "Station4": "",
                    "Time": ts.strftime("%H:%M:%S"),
                    "Time2": "",
                    "Time3": "",
                    "Time4": "",
                    "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏": "",
                    "ScanDateTime": ts.strftime("%Y-%m-%d %H:%M:%S")
                }
                append_to_sheet(new_row)

            elif code in ["S2", "S3", "S4"] and lastScan is not None:
                idx = lastScan.name
                update_dict = lastScan.to_dict()
                update_dict[f"Barcode{code[-1]}"] = code
                update_dict[f"Station{code[-1]}"] = staName
                update_dict[f"Time{code[-1]}"] = ts.strftime("%H:%M:%S")
                if code == "S3":
                    update_dict["‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"] = reason.strip()
                update_dict["ScanDateTime"] = ts.strftime("%Y-%m-%d %H:%M:%S")
                update_last_row(idx, update_dict)

            st.success(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô {code} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ @ {ts.strftime('%H:%M:%S')}")

        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")

# ============================================
# üìä Display Google Sheet Data
# ============================================
st.divider()
st.subheader("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Google Sheet")

try:
    df = get_all_scans()
    st.dataframe(df)
except Exception as e:
    st.error(f"Cannot fetch Google Sheet: {e}")

